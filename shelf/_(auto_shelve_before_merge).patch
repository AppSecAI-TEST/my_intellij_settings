Index: ../pe_rplan/rplan-client-core/rplan-client-core-lib/src/main/java/de/actano/rplan/sm/business/persistency/ServerDateProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../pe_rplan/rplan-client-core/rplan-client-core-lib/src/main/java/de/actano/rplan/sm/business/persistency/ServerDateProvider.java	(revision 25055)
+++ ../pe_rplan/rplan-client-core/rplan-client-core-lib/src/main/java/de/actano/rplan/sm/business/persistency/ServerDateProvider.java	(revision )
@@ -5,6 +5,9 @@
 import java.sql.SQLException;
 import java.util.Date;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import de.actano.lib.Log;
 import de.actano.rplan.lib.util.DateProvider;
 import de.actano.rplan.persistency.transaction.JDBCStatement;
@@ -18,6 +21,8 @@
  */
 public class ServerDateProvider implements DateProvider
 {
+    private Logger log = LoggerFactory.getLogger(this.getClass());
+
     private TransactionProvider oTransactionProvider;
 
     private long oLastSyncTime = 0;
@@ -61,7 +66,9 @@
         if (System.currentTimeMillis() - oLastSyncTime >= oSyncIntervallInMillisecond || System.currentTimeMillis() < oLastSyncTime)
             synchronizeWithServer();
 
-        return new Date(((System.currentTimeMillis() + oLastLocalDeltaMilliSeconds) / 10) * 10);
+        Date date = new Date(( ( System.currentTimeMillis() + oLastLocalDeltaMilliSeconds ) / 10 ) * 10);
+        log.debug("returning server date: {}", date);
+        return date;
     }
 
     /**
@@ -79,10 +86,18 @@
             pt.execute();
 
             oLastSyncTime = System.currentTimeMillis();
-            oLastLocalDeltaMilliSeconds = jdbcstmt.oSQLDate.getTime() - oLastSyncTime;
+            long serverMillis = jdbcstmt.oSQLDate.getTime();
+            oLastLocalDeltaMilliSeconds = serverMillis - oLastSyncTime;
 
-            return new Date(jdbcstmt.oSQLDate.getTime());
+            Date serverDate = new Date(serverMillis);
+            if (log.isDebugEnabled())
+            {
+                Date localDate = new Date(oLastSyncTime);
+                log.debug("current server millis {}, local millis: {}, deltaMilliseconds: {}, server date: {}, local date: {}, offset(hours): {}",
+                          new Object[] {serverMillis, oLastSyncTime, oLastLocalDeltaMilliSeconds, serverDate, localDate, String.format("%.2f", (float)oLastLocalDeltaMilliSeconds/3600000.0)});
-        }
+            }
+            return serverDate;
+        }
         catch (Exception e)
         {
             Log.error(getClass(), "couldn't sync with server", e);
@@ -92,6 +107,8 @@
 
     private static class GetServerDateStatement implements JDBCStatement
     {
+        private Logger log = LoggerFactory.getLogger(this.getClass());
+
         public Date oSQLDate;
         private CallableStatement oStatement;
 
@@ -108,6 +125,7 @@
 
             if (oStatement.wasNull())    // bezieht sich auf das vorhergehende getXXX()-stmt
                 throw new RuntimeException("sysdate returned by db is null");
+            log.debug("fetched server date: {}", oSQLDate);
         }
 
         public void closeJDBCStatement() throws SQLException
